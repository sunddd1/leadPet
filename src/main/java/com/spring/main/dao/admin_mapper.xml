<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<!-- 누가 이 XML 을 사용할까? 누구와 연결? -->
<mapper namespace="com.spring.main.dao.AdminDAO">
	<update id="change">
		UPDATE admin SET password=#{param1} WHERE admin_id=#{param2}  
	</update>
	
	<delete id="adminDelete">
		DELETE FROM admin WHERE admin_id=#{param1}
	</delete>
	
	<select id="idCheck" resultType="int">
		SELECT count(admin_id) FROM admin WHERE admin_id=#{param1}
	</select>
	
	<select id="nickCheck" resultType="int">
		SELECT count(nickname) FROM admin WHERE nickname=#{param1}
	</select>
	
	<insert id="insert">
		INSERT INTO admin(admin_id,nickname,password,reg_date) VALUES(#{param1}, #{param2}, #{param3},SYSDATE)
	</insert>
	
	<select id="search" parameterType="hashMap" resultType="admin">
		SELECT * FROM admin	
		<where>
			<if test="!keyword.equals('') and search == 'id'">admin_id LIKE '%'||#{keyword}||'%'</if>
			<if test="!keyword.equals('') and search == 'nickname'">nickname LIKE '%'||#{keyword}||'%'</if>
		</where>
	</select>
	
	<!-- 관리자 리스트 -->
	<select id="adminList" resultType="admin">
	SELECT admin_id,password,nickname,reg_date, rnum 
	FROM (
	SELECT admin_id,password,nickname,reg_date, ROW_NUMBER() OVER(ORDER BY reg_date DESC) 
	AS rnum FROM admin
	 <where>
			<if test="param3 == 'id'"> admin_id LIKE LOWER(#{param4}) or admin_id LIKE UPPER(#{param4})</if>
			<if test="param3 == 'nickname'"> nickname LIKE LOWER(#{param4}) or nickname LIKE UPPER(#{param4})</if>
	</where>
	) 
	WHERE rnum BETWEEN #{param1} AND #{param2} AND admin_id!='admin'
	</select>
	
	<select id="adminCount" resultType="Integer">
		SELECT COUNT(admin_id) FROM (
		SELECT admin_id FROM admin 
		<where>
			<if test="param1 == 'id'"> admin_id LIKE LOWER(#{param2}) or admin_id LIKE UPPER(#{param2})</if>
			<if test="param1 == 'nickname'"> nickname LIKE LOWER(#{param2}) or nickname LIKE UPPER(#{param2})</if>
		</where>
		)
		WHERE admin_id != 'admin'
	</select>
	
	<!-- 멤버 리스트  // int start, int end, String search, String keyword) -->	
	<select id="memberList" resultType="member">
		SELECT id, password, name, age, gender, email, reg_date, withdraw, 
      black , change_date, point, nickname, grade, black_cnt, black_date FROM 
      (SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, id, password, name, age, gender, email, reg_date, withdraw, 
      black , change_date, point, nickname, grade, black_cnt, black_date FROM member WHERE 
      <if test="param3 == 'id'"> id  LIKE #{param4}</if>
      <if test="param3 == 'nickname'"> nickname  LIKE #{param4}</if>
      ) 
      WHERE rnum BETWEEN #{param1} AND #{param2} ORDER BY reg_date DESC
	</select>
	
	<select id="memberCount" resultType="Integer">
		SELECT COUNT(id) FROM (
		SELECT id FROM member 
		<where>
			<if test="param1 == 'id'"> id LIKE LOWER(#{param2}) or id LIKE UPPER(#{param2})</if>
			<if test="param1 == 'nickname'"> nickname LIKE LOWER(#{param2}) or nickname LIKE UPPER(#{param2})</if>
		</where>
		)
	</select>
	
	<!-- 블랙 리스트 -->	
	<select id="blackList" resultType="member">
		 SELECT id, password, name, age, gender, email, reg_date, withdraw, 
      black , change_date, point, nickname, grade, black_cnt, black_date FROM 
      (SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, id, password, name, age, gender, email, reg_date, withdraw, 
      black , change_date, point, nickname, grade, black_cnt, black_date FROM member WHERE black='Y' AND withdraw='N' AND
      <if test="param3 == 'id'"> id  LIKE #{param4}</if>
      <if test="param3 == 'nickname'"> nickname  LIKE #{param4}</if>
      ) 
      WHERE rnum BETWEEN #{param1} AND #{param2}ORDER BY reg_date DESC
	</select>
	
	<select id="blackCount" resultType="Integer">
		SELECT COUNT(id) FROM (
		SELECT id,withdraw,black FROM member 
		<where>
			<if test="param1 == 'id'"> id LIKE LOWER(#{param2}) or id LIKE UPPER(#{param2})</if>
			<if test="param1 == 'nickname'"> nickname LIKE LOWER(#{param2}) or nickname LIKE UPPER(#{param2})</if>
		</where>
		)
		WHERE black='Y' AND withdraw='N'
	</select>
	
	<!-- 탈퇴 리스트 -->
	<select id="withdrawList" resultType="member">
		      SELECT id, password, name, age, gender, email, reg_date, withdraw, 
      black , change_date, point, nickname, grade, black_cnt, black_date FROM 
      (SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, id, password, name, age, gender, email, reg_date, withdraw, 
      black , change_date, point, nickname, grade, black_cnt, black_date FROM member WHERE  withdraw='Y' AND
      <if test="param3 == 'id'"> id  LIKE #{param4}</if>
      <if test="param3 == 'nickname'"> nickname  LIKE #{param4}</if>
      ) 
      WHERE rnum BETWEEN #{param1} AND #{param2}ORDER BY reg_date DESC
	</select>
	
	<select id="withdrawCount" resultType="Integer">
		SELECT COUNT(id) FROM (
		SELECT id,withdraw,black FROM member 
		<where>
			<if test="param1 == 'id'"> id LIKE LOWER(#{param2}) or id LIKE UPPER(#{param2})</if>
			<if test="param1 == 'nickname'"> nickname LIKE LOWER(#{param2}) or nickname LIKE UPPER(#{param2})</if>
		</where>
		)
		WHERE  withdraw='Y'
	</select>
	
	<!-- 신고 리스트 -->
	<select id="reportList" resultType="report">
		SELECT rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date FROM 
		(SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date 
		FROM 
		(SELECT rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date FROM report WHERE id LIKE LOWER(#{param4}) or id LIKE
		UPPER(#{param4})) WHERE type != 'com'
		<if test="!param3.equals('')">
		 AND type=#{param3}
		</if>
		AND proc_ex='N')
		WHERE rnum BETWEEN #{param1} AND #{param2}
	 </select>
	 
	 <select id="reportCount" resultType="Integer">
       	SELECT COUNT(id) FROM 
        (SELECT id,type,proc_ex FROM report WHERE id LIKE LOWER(#{param2}) or id LIKE UPPER(#{param2}))
        WHERE proc_ex='N'
        <if test="!param1.equals('')">
         	AND type = #{param1}
        </if>
	</select>
	
	<!-- 처리완료 리스트 -->
	<select id="finishList" resultType="report">

SELECT rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date FROM (SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date FROM 
(SELECT  rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date 
FROM report WHERE id LIKE LOWER(#{param3})  or id LIKE UPPER(#{param3})) 
WHERE type != 'com' AND proc_ex='Y') WHERE rnum BETWEEN #{param1} AND #{param2} ORDER BY proc_date DESC

	 </select>
	 
	 <select id="finishCount" resultType="Integer">
       	SELECT COUNT(id) FROM 
        (SELECT id,type,proc_ex FROM report WHERE id LIKE LOWER(#{param1}) or id LIKE UPPER(#{param1}))
        WHERE proc_ex='Y' AND type != 'com'
       
	</select>
	
	<!-- 포인트 리스트 -->
	<select id="pointList" resultType="point">
	 	SELECT id, gain, reg_date, pm_point FROM
      (SELECT  ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, id, gain, reg_date, pm_point
      FROM point_history WHERE id LIKE LOWER(#{param3}) or id LIKE UPPER(#{param3})) 
      WHERE rnum BETWEEN #{param1} AND #{param2} ORDER BY reg_date DESC
	 </select>
	 
	 <select id="pointCount" resultType="Integer">
		SELECT COUNT(id) FROM point_history WHERE id LIKE LOWER(#{param1}) or id LIKE UPPER(#{param1})
	</select>
	
	 <!-- 신고댓글 리스트 -->
	 <select id="replyList" resultType="report">
	 	SELECT rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date FROM
      (SELECT  ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date 
      FROM report WHERE id LIKE LOWER(#{param3}) or id LIKE UPPER(#{param3})) 
      WHERE rnum BETWEEN #{param1} AND #{param2}  AND type = 'com' AND proc_ex='N' ORDER BY proc_date DESC
	 </select>
	 
	 <select id="replyCount" resultType="Integer">
       	SELECT COUNT(id) FROM 
        (SELECT id,type,proc_ex FROM report WHERE id LIKE LOWER(#{param1}) or id LIKE UPPER(#{param1}))
        WHERE proc_ex='N' AND type = 'com'
	</select>
	 
	 <!-- 신고댓글 처리 리스트 -->
	 <select id="finishReplyList" resultType="report">
SELECT rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date FROM (SELECT ROW_NUMBER() OVER(ORDER BY reg_date DESC) AS rnum, rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date FROM 
(SELECT  rep_idx, field, reason, proc_ex,reg_date,id,type,admin_id,proc_date 
FROM report WHERE id LIKE LOWER(#{param3})  or id LIKE UPPER(#{param3})) 
WHERE type = 'com' AND proc_ex='Y') WHERE rnum BETWEEN #{param1} AND #{param2} ORDER BY proc_date DESC
	 </select>
	 
	 <select id="finishReplyCount" resultType="Integer">
       	SELECT COUNT(id) FROM 
        (SELECT id,type,proc_ex FROM report WHERE id LIKE LOWER(#{param1}) or id LIKE UPPER(#{param1}))
        WHERE proc_ex='Y' AND type = 'com'
       
	</select>
	
	<!-- 블라인드N 리스트 -->
	<select id="blindNList" resultType="board">
	 	SELECT bbs_idx, bbs_subject, bbs_content, reg_date,mod_del,bbs_blind,reco_count,views, type, nickname, pet_idx, category_name FROM
      (SELECT  ROW_NUMBER() OVER(ORDER BY reg_date DESC) 
      AS rnum,bbs_idx, bbs_subject, bbs_content, reg_date,mod_del,bbs_blind,reco_count,views, type, nickname, pet_idx, category_name
      FROM bbs WHERE nickname LIKE LOWER(#{param3}) or nickname LIKE UPPER(#{param3})) 
      WHERE rnum BETWEEN #{param1} AND #{param2} AND bbs_blind='N'  ORDER BY reg_date DESC
	 </select>
	 
	 <select id="blindNCount" resultType="Integer">
		SELECT COUNT(nickname) FROM bbs WHERE bbs_blind='N' 
       AND nickname LIKE LOWER(#{param1}) or nickname LIKE UPPER(#{param1})
	</select>
	
	 <update id="blindY">
		UPDATE bbs SET bbs_blind='Y' WHERE bbs_idx=#{param1}
	</update>
	
	<update id="onlyBlindY">
		UPDATE bbs SET bbs_blind='Y' WHERE bbs_idx=#{param1}
	</update>
	
	<!-- 블라인드Y 리스트 -->
	<select id="blindYList" resultType="board">
	 SELECT bbs_idx, bbs_subject, bbs_content, reg_date,mod_del,bbs_blind,reco_count,views, type, nickname, pet_idx, category_name FROM
      (SELECT  ROW_NUMBER() OVER(ORDER BY reg_date DESC) 
      AS rnum,bbs_idx, bbs_subject, bbs_content, reg_date,mod_del,bbs_blind,reco_count,views, type, nickname, pet_idx, category_name
      FROM bbs WHERE nickname LIKE LOWER(#{param3}) or nickname LIKE UPPER(#{param3})) 
      WHERE rnum BETWEEN #{param1} AND #{param2} AND bbs_blind='Y'  ORDER BY reg_date DESC
	 </select>
	 
	 <select id="blindYCount" resultType="Integer">
		SELECT COUNT(nickname) FROM bbs WHERE bbs_blind='Y' 
       AND nickname LIKE LOWER(#{param1}) or nickname LIKE UPPER(#{param1})
	</select>
	
	<update id="blindN">
		UPDATE bbs SET bbs_blind='N' WHERE bbs_idx=#{param1}
	</update>
	
	<update id="onlyBlindN">
		UPDATE bbs SET bbs_blind='N' WHERE bbs_idx=#{param1}
	</update>
	
	
	<!-- 디테일 -->
	 <select id="detailMember" resultType="member">
	 	SELECT id,name,age,gender,email,reg_date,black,withdraw,change_date,nickname,point,grade, black_cnt FROM member WHERE id=#{param1}
	 </select>
	 
	 <select id="detailPet" resultType="pet">
	 	SELECT p.pet_idx, p.dog_cat, p.pet_name, p.bday, p.kg, pi.newFileName FROM pet p, pet_img pi WHERE p.id=#{param1} AND p.pet_idx = pi.pet_idx
	 </select> 
	 
	 <select id="detailReply" resultType="reply">
		SELECT reply_content FROM reply WHERE reply_idx=#{param1}
	</select>
	 
	 <update id="restoreWithdraw">
	 	UPDATE member SET withdraw='N' WHERE id=#{param1}
	 </update>
	 
	 <select id="toggleMemberDisable" resultType="String">
	 	SELECT black FROM member WHERE id=#{param1}
	 </select>
	 
	 <select id="blackDate" resultType="int">
	 	SELECT black_day FROM black_day WHERE black_cnt=#{param1}
	 </select>
	 
	 <update id="memberBlackY">
	 	UPDATE member SET black='Y', black_cnt=black_cnt+1, black_date=#{param2} WHERE id=#{param1}
	 </update>
	 
	 <!-- 반환하는게 int -->
	 <insert id="insertBlack">
	 	INSERT INTO blackList(black_idx, id, admin_id) VALUES(seq_blackList.NEXTVAL, #{param1}, #{param2})
	 </insert>
	 
	 <update id="memberBlackN">
	 	UPDATE member SET black='N', black_cnt=black_cnt-1  WHERE id=#{param1}
	 </update>
	 
	 
	 <select id="loop_free" resultType="String">
	 	SELECT id FROM member WHERE <![CDATA[black_date < #{param1}]]> AND black='Y' AND <![CDATA[black_cnt<3]]>
	 </select>
	 
	 <update id="freedom">
	 	UPDATE member SET black='N' WHERE id=#{param1}
	 </update>
	 
<!-- 	 <select id="typeReportList" resultType="report" parameterType="String">
		SELECT * FROM report
		<where>
			<if test="param1 == 'tip'">type ='tip'</if>
			<if test="param1 == 'gal'">type ='gal'</if>
			<if test="param1 == 'fed'">type ='fed'</if>
			<if test="param1 == 'res'">type ='res'</if>
			<if test="param1 == 'run'">type ='run'</if>
		</where>
		 AND proc_ex='N'
	</select> -->
	
	<!-- <select id="tipReportList" resultType="report">
	 	SELECT * FROM report WHERE proc_ex='N' AND type ='tip' ORDER BY reg_date
	 </select>
	
	<select id="galReportList" resultType="report">
	 	SELECT * FROM report WHERE proc_ex='N' AND type ='gal' ORDER BY reg_date
	 </select>
	 
	 <select id="fedReportList" resultType="report">
	 	SELECT * FROM report WHERE proc_ex='N' AND type ='fed' ORDER BY reg_date
	 </select>
	 
	 <select id="resReportList" resultType="report">
	 	SELECT * FROM report WHERE proc_ex='N' AND type ='res' ORDER BY reg_date
	 </select>
	 
	 <select id="runReportList" resultType="report">
	 	SELECT * FROM report WHERE proc_ex='N' AND type ='run' ORDER BY reg_date
	 </select> -->
	 
	<update id="procY">
		UPDATE report SET proc_ex='Y',proc_date=SYSDATE,admin_id=#{param2} WHERE field=#{param1} AND type != 'com'
	</update>
	
	<update id="replyprocY">
		UPDATE report SET proc_ex='Y',proc_date=SYSDATE,admin_id=#{param2} WHERE field=#{param1} AND type = 'com'
	</update>
	
	<update id="replyblindY">
		UPDATE reply SET reply_blind='Y' WHERE reply_idx=#{param1}
	</update>
	
	
	
	
	
	<!-- 어드민으로 넘어갈거  -->
	<select id="vaccList" resultType="vaccin">
		SELECT * FROM vaccin ORDER BY vacc_idx DESC
	</select>
	
	<insert id="regVacc" parameterType="vaccin">
		INSERT INTO vaccin (vacc_idx, vacc_name, content, cycle, vacc_cnt, dog_cat)
			VALUES (vacc_idx_seq.NEXTVAL, #{vacc_name},#{content},#{cycle},#{vacc_cnt},#{dog_cat})
	</insert>

	<select id="regVaccDetail" resultType="vaccin">
		SELECT * FROM vaccin WHERE vacc_idx=#{param1}
	</select>
	
	<update id="updateRegVacc" parameterType="vaccin">
		UPDATE vaccin SET content=#{content}, vacc_name=#{vacc_name},cycle=#{cycle},vacc_cnt=#{vacc_cnt}, dog_cat=#{dog_cat}
		 WHERE vacc_idx=#{vacc_idx}
	</update>
	
	<delete id="deleteVacc">
		DELETE FROM vaccin WHERE vacc_idx = #{param1}
	</delete>

	<select id="VaccSearch" resultType="vaccin">
		SELECT vacc_idx, vacc_name, content,cycle, vacc_cnt, dog_cat FROM
		 (SELECT ROW_NUMBER() OVER(ORDER BY vacc_idx DESC) AS rnum,vacc_idx, vacc_name, content,cycle, vacc_cnt, dog_cat 
		 FROM vaccin WHERE vacc_name LIKE LOWER(#{param1}) or vacc_name LIKE UPPER(#{param1}))
		WHERE rnum BETWEEN #{param2} AND #{param3}
	</select>
	
	<select id="vaccCount" resultType="int">
		SELECT COUNT(vacc_idx) FROM vaccin WHERE  vacc_name LIKE LOWER(#{param1}) or vacc_name LIKE UPPER(#{param1}) ORDER BY vacc_idx DESC
	</select>
	
</mapper>












